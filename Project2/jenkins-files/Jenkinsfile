pipeline {
    agent {
        label 'jenkins-agent'
    }

    // 2. ENVIRONMENT
    // Global variables for the pipeline
    environment {
        // --- From your requirements ---
        REGISTRY        = "docker.io/omar4700"
        DOCKER_CRED_ID  = "DockerHub-Cred" // The ID of your credentials in Jenkins
        NAMESPACE       = "dev"
        
        // --- Derived variables for image tags ---
        BACKEND_IMAGE   = "${REGISTRY}/backend:${env.BUILD_NUMBER}"
        PROXY_IMAGE     = "${REGISTRY}/proxy:${env.BUILD_NUMBER}"
        DATABASE_IMAGE  = "${REGISTRY}/database:${env.BUILD_NUMBER}"
        
        // --- For Smoke Test ---
        // Using Kubernetes internal DNS. Assumes 'proxy' service in 'dev' namespace.
        APP_HEALTH_URL  = "http://proxy.dev.svc.cluster.local/health"
    }

    // 3. OPTIONS
    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    // 4. STAGES
    stages {

        // --- Stage 1: Source ---
        stage('Source') {
            steps {
                echo "→ Pulling code from GitHub repository..."
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: 'https://github.com/Omarh4700/Projects.git']]
                ])
                sh 'ls -la'
                echo "Code checkout complete."
            }
        }

        // --- Stage 2: Build ---
        stage('Build') {
            steps {
                echo "→ Building Docker images..."
                // Run these steps in the 'docker' container
                container('docker') {
                    // Assumes Dockerfiles are in sub-folders
                    sh "docker build -t ${BACKEND_IMAGE} ./backend"
                    sh "docker build -t ${PROXY_IMAGE} ./proxy"
                    sh "docker build -t ${DATABASE_IMAGE} ./database"
                }
                echo "Docker images built."
            }
        }

        // --- Stage 3: Push ---
        stage('Push') {
            steps {
                echo "→ Pushing images to ${REGISTRY}..."
                container('docker') {
                    withCredentials([usernamePassword(credentialsId: DOCKER_CRED_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        // Login to Docker Hub
                        sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin ${REGISTRY}"
                        
                        // Push all three images
                        sh "docker push ${BACKEND_IMAGE}"
                        sh "docker push ${PROXY_IMAGE}"
                        sh "docker push ${DATABASE_IMAGE}"
                    }
                }
                echo "Docker images pushed."
            }
        }

        // --- Stage 4: Deploy ---
        stage('Deploy') {
            steps {
                echo "Deploying to Kubernetes 'dev' namespace with Helm..."
                // Run these steps in the 'helm' container
                container('helm') {
                    script {
                        
                        sh """
                            set -e
                            
                            helm upgrade --install backend ./charts/backend \
                                --namespace ${NAMESPACE} \
                                --set image.tag=${env.BUILD_NUMBER} \
                                --wait --timeout=5m

                            helm upgrade --install proxy ./charts/proxy \
                                --namespace ${NAMESPACE} \
                                --set image.tag=${env.BUILD_NUMBER} \
                                --wait --timeout=5m

                            helm upgrade --install database ./charts/database \
                                --namespace ${NAMESPACE} \
                                --set image.tag=${env.BUILD_NUMBER} \
                                --wait --timeout=5m
                        """
                    }
                }
                echo "Helm deploy complete."
            }
        }

        // --- Stage 5: Smoke Test ---
        stage('Smoke Test') {
            steps {
                // This runs in the default 'jnlp' container (which has curl)
                sh """
                    set -e
                    echo "Waiting 20 seconds for application to stabilize..."
                    sleep 20
                    
                    echo "Running simple smoke test on ${APP_HEALTH_URL}..."
                    curl --fail -sS -o /dev/null --connect-timeout 10 ${APP_HEALTH_URL}
                    
                    echo "✓ Smoke test PASSED."
                    """
            }
        }
    }

    // --- Stage 6: Notification ---
    post {
    success {
        mail to: 'hassanomar4700@gmail.com',
             subject: "Jenkins Build #${BUILD_NUMBER} Succeeded",
             body: """\
                The Jenkins build #${BUILD_NUMBER} has completed successfully.

                Project: ${JOB_NAME}
                Build URL: ${BUILD_URL}
                """
    }
    failure {
        mail to: 'hassanomar4700@gmail.com',
             subject: "Jenkins Build #${BUILD_NUMBER} Failed",
             body: """\
                The Jenkins build #${BUILD_NUMBER} has failed.

                Project: ${JOB_NAME}
                Build URL: ${BUILD_URL}

                Please check the Jenkins logs for details.
                """
            }
        }
    }
}
