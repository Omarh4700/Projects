pipeline {
    agent {
        kubernetes {
            label 'jenkins-agent'
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  containers:
    - name: kaniko
      image: gcr.io/kaniko-project/executor:latest
      command:
        - cat
      tty: true
      volumeMounts:
        - name: docker-config
          mountPath: /kaniko/.docker
    - name: helm
      image: alpine/helm:3.13.1
      command:
        - cat
      tty: true
  volumes:
    - name: docker-config
      projected:
        sources:
          - secret:
              name: dockerhub-secret
"""
        }
    }

    environment {
        REGISTRY = "docker.io/omar4700"
        NAMESPACE = "dev"
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "Checking out code..."
                checkout scmGit(
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: 'https://github.com/Omarh4700/Projects.git']]
                )
            }
        }

        stage('Build & Push Images') {
            steps {
                container('kaniko') {
                    script {
                        echo "Building and pushing Docker images..."
                        sh """
                            /kaniko/executor --context ./backend --destination=${REGISTRY}/backend:${BUILD_NUMBER}
                            /kaniko/executor --context ./proxy --destination=${REGISTRY}/proxy:${BUILD_NUMBER}
                            /kaniko/executor --context ./database --destination=${REGISTRY}/database:${BUILD_NUMBER}
                        """
                    }
                }
            }
        }

        stage('Deploy to K8s using Helm') {
            steps {
                container('helm') {
                    script {
                        echo "Deploying application to Kubernetes..."
                        sh """
                            helm upgrade --install myapp ./helm-chart \
                            --namespace ${NAMESPACE} \
                            --set backend.image=${REGISTRY}/backend:${BUILD_NUMBER} \
                            --set proxy.image=${REGISTRY}/proxy:${BUILD_NUMBER} \
                            --set database.image=${REGISTRY}/database:${BUILD_NUMBER}
                        """
                    }
                }
            }
        }
    }
}
